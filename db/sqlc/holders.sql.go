// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: holders.sql

package queries

import (
	"context"
	"database/sql"

	"github.com/vocdoni/census3/db/annotations"
)

const andQueryHolders = `-- name: AndQueryHolders :many
SELECT th1.holder_id
FROM token_holders th1
WHERE th1.token_id = ? 
    AND th1.chain_id = ?
    AND th1.balance >= ?
INTERSECT
SELECT th2.holder_id
FROM token_holders th2
WHERE th2.token_id = ? 
    AND th2.chain_id = ?
    AND th2.balance >= ?
`

type AndQueryHoldersParams struct {
	TokenIDA    []byte
	ChainIDA    uint64
	MinBalanceA []byte
	TokenIDB    []byte
	ChainIDB    uint64
	MinBalanceB []byte
}

func (q *Queries) AndQueryHolders(ctx context.Context, arg AndQueryHoldersParams) ([][]byte, error) {
	rows, err := q.db.QueryContext(ctx, andQueryHolders,
		arg.TokenIDA,
		arg.ChainIDA,
		arg.MinBalanceA,
		arg.TokenIDB,
		arg.ChainIDB,
		arg.MinBalanceB,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items [][]byte
	for rows.Next() {
		var holder_id []byte
		if err := rows.Scan(&holder_id); err != nil {
			return nil, err
		}
		items = append(items, holder_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const countTokenHoldersByTokenID = `-- name: CountTokenHoldersByTokenID :one
SELECT COUNT(holder_id) 
FROM token_holders
WHERE token_id = ?
`

func (q *Queries) CountTokenHoldersByTokenID(ctx context.Context, tokenID []byte) (int64, error) {
	row := q.db.QueryRowContext(ctx, countTokenHoldersByTokenID, tokenID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createHolder = `-- name: CreateHolder :execresult
INSERT INTO holders (id)
VALUES (?)
`

func (q *Queries) CreateHolder(ctx context.Context, id annotations.Address) (sql.Result, error) {
	return q.db.ExecContext(ctx, createHolder, id)
}

const createTokenHolder = `-- name: CreateTokenHolder :execresult
INSERT INTO token_holders (
    token_id,
    holder_id,
    balance,
    block_id,
    chain_id
)
VALUES (
    ?, ?, ?, ?, ?
)
`

type CreateTokenHolderParams struct {
	TokenID  []byte
	HolderID []byte
	Balance  []byte
	BlockID  uint64
	ChainID  uint64
}

func (q *Queries) CreateTokenHolder(ctx context.Context, arg CreateTokenHolderParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createTokenHolder,
		arg.TokenID,
		arg.HolderID,
		arg.Balance,
		arg.BlockID,
		arg.ChainID,
	)
}

const deleteTokenHolder = `-- name: DeleteTokenHolder :execresult
DELETE FROM token_holders
WHERE token_id = ? AND holder_id = ?
`

type DeleteTokenHolderParams struct {
	TokenID  []byte
	HolderID []byte
}

func (q *Queries) DeleteTokenHolder(ctx context.Context, arg DeleteTokenHolderParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteTokenHolder, arg.TokenID, arg.HolderID)
}

const lastBlockByTokenID = `-- name: LastBlockByTokenID :one
SELECT block_id 
FROM token_holders
WHERE token_id = ?
ORDER BY block_id DESC
LIMIT 1
`

func (q *Queries) LastBlockByTokenID(ctx context.Context, tokenID []byte) (uint64, error) {
	row := q.db.QueryRowContext(ctx, lastBlockByTokenID, tokenID)
	var block_id uint64
	err := row.Scan(&block_id)
	return block_id, err
}

const orQueryHolders = `-- name: OrQueryHolders :many
SELECT th1.holder_id
FROM token_holders th1
WHERE th1.token_id = ? 
    AND th1.chain_id = ?
    AND th1.balance >= ?
UNION
SELECT th2.holder_id
FROM token_holders th2
WHERE th2.token_id = ? 
    AND th2.chain_id = ?
    AND th2.balance >= ?
`

type OrQueryHoldersParams struct {
	TokenIDA    []byte
	ChainIDA    uint64
	MinBalanceA []byte
	TokenIDB    []byte
	ChainIDB    uint64
	MinBalanceB []byte
}

func (q *Queries) OrQueryHolders(ctx context.Context, arg OrQueryHoldersParams) ([][]byte, error) {
	rows, err := q.db.QueryContext(ctx, orQueryHolders,
		arg.TokenIDA,
		arg.ChainIDA,
		arg.MinBalanceA,
		arg.TokenIDB,
		arg.ChainIDB,
		arg.MinBalanceB,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items [][]byte
	for rows.Next() {
		var holder_id []byte
		if err := rows.Scan(&holder_id); err != nil {
			return nil, err
		}
		items = append(items, holder_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const tokenHolderByTokenIDAndHolderID = `-- name: TokenHolderByTokenIDAndHolderID :one
SELECT holders.id, token_holders.token_id, token_holders.holder_id, token_holders.balance, token_holders.block_id, token_holders.chain_id
FROM holders
JOIN token_holders ON holders.id = token_holders.holder_id
WHERE token_holders.token_id = ? 
AND token_holders.chain_id = ?
AND token_holders.holder_id = ?
`

type TokenHolderByTokenIDAndHolderIDParams struct {
	TokenID  []byte
	ChainID  uint64
	HolderID []byte
}

type TokenHolderByTokenIDAndHolderIDRow struct {
	ID       annotations.Address
	TokenID  []byte
	HolderID []byte
	Balance  []byte
	BlockID  uint64
	ChainID  uint64
}

func (q *Queries) TokenHolderByTokenIDAndHolderID(ctx context.Context, arg TokenHolderByTokenIDAndHolderIDParams) (TokenHolderByTokenIDAndHolderIDRow, error) {
	row := q.db.QueryRowContext(ctx, tokenHolderByTokenIDAndHolderID, arg.TokenID, arg.ChainID, arg.HolderID)
	var i TokenHolderByTokenIDAndHolderIDRow
	err := row.Scan(
		&i.ID,
		&i.TokenID,
		&i.HolderID,
		&i.Balance,
		&i.BlockID,
		&i.ChainID,
	)
	return i, err
}

const tokenHoldersByStrategyID = `-- name: TokenHoldersByStrategyID :many
SELECT token_holders.holder_id, token_holders.balance
FROM token_holders
JOIN strategy_tokens ON strategy_tokens.token_id = token_holders.token_id
WHERE strategy_tokens.strategy_id = ?
    AND token_holders.balance >= strategy_tokens.min_balance
`

type TokenHoldersByStrategyIDRow struct {
	HolderID []byte
	Balance  []byte
}

func (q *Queries) TokenHoldersByStrategyID(ctx context.Context, strategyID uint64) ([]TokenHoldersByStrategyIDRow, error) {
	rows, err := q.db.QueryContext(ctx, tokenHoldersByStrategyID, strategyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TokenHoldersByStrategyIDRow
	for rows.Next() {
		var i TokenHoldersByStrategyIDRow
		if err := rows.Scan(&i.HolderID, &i.Balance); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const tokenHoldersByTokenID = `-- name: TokenHoldersByTokenID :many
SELECT holders.id, token_holders.balance
FROM holders
JOIN token_holders ON holders.id = token_holders.holder_id
WHERE token_holders.token_id = ?
`

type TokenHoldersByTokenIDRow struct {
	ID      annotations.Address
	Balance []byte
}

func (q *Queries) TokenHoldersByTokenID(ctx context.Context, tokenID []byte) ([]TokenHoldersByTokenIDRow, error) {
	rows, err := q.db.QueryContext(ctx, tokenHoldersByTokenID, tokenID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TokenHoldersByTokenIDRow
	for rows.Next() {
		var i TokenHoldersByTokenIDRow
		if err := rows.Scan(&i.ID, &i.Balance); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const tokenHoldersByTokenIDAndChainIDAndMinBalance = `-- name: TokenHoldersByTokenIDAndChainIDAndMinBalance :many
SELECT token_holders.holder_id
FROM token_holders
WHERE token_holders.token_id = ? 
    AND token_holders.chain_id = ?
    AND token_holders.balance >= ?
`

type TokenHoldersByTokenIDAndChainIDAndMinBalanceParams struct {
	TokenID []byte
	ChainID uint64
	Balance []byte
}

func (q *Queries) TokenHoldersByTokenIDAndChainIDAndMinBalance(ctx context.Context, arg TokenHoldersByTokenIDAndChainIDAndMinBalanceParams) ([][]byte, error) {
	rows, err := q.db.QueryContext(ctx, tokenHoldersByTokenIDAndChainIDAndMinBalance, arg.TokenID, arg.ChainID, arg.Balance)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items [][]byte
	for rows.Next() {
		var holder_id []byte
		if err := rows.Scan(&holder_id); err != nil {
			return nil, err
		}
		items = append(items, holder_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const tokensByHolderID = `-- name: TokensByHolderID :many
SELECT tokens.id, tokens.name, tokens.symbol, tokens.decimals, tokens.total_supply, tokens.creation_block, tokens.type_id, tokens.synced, tokens.tags, tokens.chain_id
FROM Tokens
JOIN token_holders ON tokens.id = token_holders.token_id
WHERE token_holders.holder_id = ?
`

func (q *Queries) TokensByHolderID(ctx context.Context, holderID []byte) ([]Token, error) {
	rows, err := q.db.QueryContext(ctx, tokensByHolderID, holderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Token
	for rows.Next() {
		var i Token
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Symbol,
			&i.Decimals,
			&i.TotalSupply,
			&i.CreationBlock,
			&i.TypeID,
			&i.Synced,
			&i.Tags,
			&i.ChainID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTokenHolderBalance = `-- name: UpdateTokenHolderBalance :execresult
UPDATE token_holders
SET balance = ?,
    block_id = ?
WHERE token_id = ? 
AND holder_id = ? 
AND block_id = ?
AND chain_id = ?
`

type UpdateTokenHolderBalanceParams struct {
	Balance    []byte
	NewBlockID uint64
	TokenID    []byte
	HolderID   []byte
	BlockID    uint64
	ChainID    uint64
}

func (q *Queries) UpdateTokenHolderBalance(ctx context.Context, arg UpdateTokenHolderBalanceParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateTokenHolderBalance,
		arg.Balance,
		arg.NewBlockID,
		arg.TokenID,
		arg.HolderID,
		arg.BlockID,
		arg.ChainID,
	)
}
