// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: tokenTypes.sql

package queries

import (
	"context"
	"database/sql"
)

const createTokenType = `-- name: CreateTokenType :execresult
INSERT INTO TokenTypes (type_name)
VALUES (?)
`

func (q *Queries) CreateTokenType(ctx context.Context, typeName string) (sql.Result, error) {
	return q.db.ExecContext(ctx, createTokenType, typeName)
}

const deleteTokenType = `-- name: DeleteTokenType :execresult
DELETE FROM TokenTypes
WHERE id = ?
`

func (q *Queries) DeleteTokenType(ctx context.Context, id int64) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteTokenType, id)
}

const paginatedTokenTypes = `-- name: PaginatedTokenTypes :many
SELECT id, type_name FROM TokenTypes
ORDER BY id
LIMIT ? OFFSET ?
`

type PaginatedTokenTypesParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) PaginatedTokenTypes(ctx context.Context, arg PaginatedTokenTypesParams) ([]Tokentype, error) {
	rows, err := q.db.QueryContext(ctx, paginatedTokenTypes, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tokentype
	for rows.Next() {
		var i Tokentype
		if err := rows.Scan(&i.ID, &i.TypeName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const tokenTypeByID = `-- name: TokenTypeByID :one
SELECT id, type_name FROM TokenTypes
WHERE id = ?
LIMIT 1
`

func (q *Queries) TokenTypeByID(ctx context.Context, id int64) (Tokentype, error) {
	row := q.db.QueryRowContext(ctx, tokenTypeByID, id)
	var i Tokentype
	err := row.Scan(&i.ID, &i.TypeName)
	return i, err
}

const tokenTypeByName = `-- name: TokenTypeByName :one
SELECT id, type_name FROM TokenTypes
WHERE type_name = ?
LIMIT 1
`

func (q *Queries) TokenTypeByName(ctx context.Context, typeName string) (Tokentype, error) {
	row := q.db.QueryRowContext(ctx, tokenTypeByName, typeName)
	var i Tokentype
	err := row.Scan(&i.ID, &i.TypeName)
	return i, err
}

const updateTokenType = `-- name: UpdateTokenType :execresult
UPDATE TokenTypes
SET type_name = ?
WHERE id = ?
`

type UpdateTokenTypeParams struct {
	TypeName string
	ID       int64
}

func (q *Queries) UpdateTokenType(ctx context.Context, arg UpdateTokenTypeParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateTokenType, arg.TypeName, arg.ID)
}
